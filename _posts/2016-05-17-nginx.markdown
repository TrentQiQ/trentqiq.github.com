---
layout:     post
title:      "Nginx环境搭建"
subtitle:   "nginx+tomcat实现负载均衡"
date:       2016-05-17
author:     "QiQ"
header-img: "img/nginx+tomcat.jpg"
tags:
    - Linux
    - Nginx
---


## nginx安装

- yum安装
- 编译安装

### yum安装方式

#### 1. 导入外部软件库

`rpm -Uvh http://dl.iuscommunity.org/pub/ius/stable/Redhat/6/i386/epel-release-6-5.noarch.rpm` 
`rpm -Uvh http://dl.iuscommunity.org/pub/ius/stable/Redhat/6/i386/ius-release-1.0-10.ius.el6.noarch.rpm`  
`rpm -Uvh http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm`
	 
删除该行的注释（vi /etc/yum.repos.d/ius.repo）
`baseurl=https://dl.iuscommunity.org/pub/ius/stable/Redhat/6/$basearch` 

#### 2. yum安装nginx
`yum install -y nginx`

#### 3. 启动nginx
`service nginx start   #启动nginx`
`chkconfig nginx on    #设置nginx为开机自启动` 
`service nginx status  #查看nginx运行状态`

### 编译安装方式

参考
> http://blog.csdn.net/gaojinshan/article/details/37603157
> http://blog.chinaunix.net/xmlrpc.php?r=blog/article&uid=29791971&id=4702007

## httpd安装

1. `yum install -y httpd`
2. 向web服务器中放入测试文件(/var/www/html)

## 配置负载均衡

1. `vi /etc/nginx/nginx.conf`

		http {
	    include       /etc/nginx/mime.types;
	    default_type  application/octet-stream;
	
	    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
	                      '$status $body_bytes_sent "$http_referer" '
	                      '"$http_user_agent" "$http_x_forwarded_for"';
	
	    access_log  /var/log/nginx/access.log  main;
	
	    sendfile        on;
	    #tcp_nopush     on;
	
	    keepalive_timeout  65;
	
	    #gzip  on;
	
	    upstream test.com {  #默认负载均衡方式是轮询
	    server 192.168.71.132:80;
	    server 192.168.71.131:80;
	    }

2. `vi /etc/nginx/conf.d/default.conf`



		server {   
	    listen       80;
	    server_name  test.com;

	    charset utf-8;
	    #access_log  /var/log/nginx/log/host.access.log  main;
	
	    location / {
	        root   /usr/share/nginx/html;
	        index  index.html index.htm;
	        proxy_pass      http://test.com;
	    }

### 负载均衡的几种方式

1. 轮询（默认）
每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。

2. weight
指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。
例如：

		upstream bakend {
		server 192.168.159.10 weight=10;
		server 192.168.159.11 weight=10;
		}

3. ip_hash
每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。
例如：

		upstream resinserver{
		ip_hash;
		server 192.168.159.10:8080;
		server 192.168.159.11:8080;
		}


4. fair（第三方）
按后端服务器的响应时间来分配请求，响应时间短的优先分配。

		upstream resinserver{
		server server1;
		server server2;
		fair;
		}


5. url_hash（第三方）
按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。
例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法

		upstream resinserver{
		server squid1:3128;
		server squid2:3128;
		hash $request_uri;
		hash_method crc32;
		}

***tips:***

		upstream resinserver{#定义负载均衡设备的Ip及设备状态
		ip_hash;
		server 127.0.0.1:8000 down;
		server 127.0.0.1:8080 weight=2;
		server 127.0.0.1:6801;
		server 127.0.0.1:6802 backup;
		}

在需要使用负载均衡的server中增加
proxy_pass http://resinserver/;

每个设备的状态设置为:

1. down 表示单前的server暂时不参与负载
2. weight 默认为1.weight越大，负载的权重就越大。
3. max_fails ：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误
4. fail_timeout:max_fails次失败后，暂停的时间。
5. backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。

## 防火墙相关问题

`service iptables stop  #关闭防火墙`
`service iptables status  #查看防火墙运行状态`

编辑防火墙配置文件

`vi /etc/sysconfig/iptables`

开放80端口

`-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT`

重启服务

`service iptables restart`


## 参考

> http://blog.chinaunix.net/xmlrpc.php?r=blog/article&uid=29791971&id=4702007
> http://blog.csdn.net/e421083458/article/details/30086413
> http://www.360doc.com/content/13/1114/12/7694408_329125489.shtml#


